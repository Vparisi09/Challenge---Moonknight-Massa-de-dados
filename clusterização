{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "f7a4a000",
      "metadata": {
        "id": "f7a4a000"
      },
      "source": [
        "\n",
        "# Clusterização de Clientes — Grupo MoonKnights\n",
        "\n",
        "**MEMBROS:**\n",
        ">Bruno Lucki - RM 558494  \n",
        ">Paulo Roger - RM 557609   \n",
        ">Victor Parisi - RM 555175   \n",
        ">Vinicius - RM 88506\n",
        "\n",
        "Aqui nós vamos:\n",
        "\n",
        "1. Fazer o setup (upload e extração do `.zip`).\n",
        "2. Ler corretamente os CSVs com separador `;`.\n",
        "3. Pré-processar (merge de **clientes_desde_FULL.csv** com **mrr_FULL.csv**, criação de variáveis numéricas, tratamento de nulos e padronização).\n",
        "4. Escolher o número de clusters pelo **método do cotovelo**.\n",
        "5. Rodar **KMeans**.\n",
        "6. Visualizar resultados (scatterplot e médias por cluster).\n",
        "\n",
        "> **Colunas reais identificadas:**  \n",
        "> - Merge pelo **`CLIENTE`**.  \n",
        "> - Em `clientes_desde_FULL.csv`: `CLIENTE`, `CLIENTE_DESDE`.  \n",
        "> - Em `mrr_FULL.csv`: `CLIENTE`, `MRR_12M`.\n",
        "\n",
        "Por que MRR?\n",
        "\n",
        "MRR = Monthly Recurring Revenue (Receita Recorrente Mensal do cliente)\n",
        "\n",
        "É quanto um cliente gera de receita todo mês para a TOTVS (assinatura, contrato, plano de software etc.).\n",
        "\n",
        "Nesse exercício, usamos o MRR_12M: uma média da receita mensal do cliente nos últimos 12 meses (ano)\n",
        "\n",
        "Para nós é o que mais faz sentido usar no cluster porque ele mede o valor financeiro do cliente."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 0) Setup: Imports\n"
      ],
      "metadata": {
        "id": "E_jXbdMDpDsh"
      },
      "id": "E_jXbdMDpDsh"
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import zipfile, io, os, glob\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "Q-RUCHjCosBw"
      },
      "id": "Q-RUCHjCosBw",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "d2f63064",
      "metadata": {
        "id": "d2f63064"
      },
      "source": [
        "## 1) Setup: upload do ZIP e extração"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "b6e2b8ac",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403
        },
        "id": "b6e2b8ac",
        "outputId": "95635361-66af-4c9e-e796-277daea1838e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selecione o arquivo .zip com a base (ex.: Challenge_TOTVS_2025_MassaDados_v1_amostra2.zip).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a9440f15-90f2-4455-872d-b59eba4fa97a\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a9440f15-90f2-4455-872d-b59eba4fa97a\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Challenge_TOTVS_2025_MassaDados_v1_amostra2.zip to Challenge_TOTVS_2025_MassaDados_v1_amostra2 (1).zip\n",
            "\n",
            "Arquivo recebido: Challenge_TOTVS_2025_MassaDados_v1_amostra2 (1).zip\n",
            "Conteúdo extraído em: dados_zip_extraidos\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/clientes_desde_FULL.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/contratacoes_ultimos_12_meses_FULL.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/dados_clientes_sample.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/dicionario.xlsx\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/historico_sample.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/mrr_FULL.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/nps_relacional_sample.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/nps_transacional_aquisicao_FULL.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/nps_transacional_implantacao_FULL.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/nps_transacional_onboarding_FULL.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/nps_transacional_produto_sample.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/nps_transacional_suporte_sample.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/telemetria_1_sample.csv\n",
            "dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/tickets_sample.csv\n"
          ]
        }
      ],
      "source": [
        "print(\"Selecione o arquivo .zip com a base\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "zip_name = list(uploaded.keys())[0]\n",
        "print(\"\\nArquivo recebido:\", zip_name)\n",
        "\n",
        "extract_dir = \"dados_zip_extraidos\"\n",
        "os.makedirs(extract_dir, exist_ok=True)\n",
        "with zipfile.ZipFile(io.BytesIO(uploaded[zip_name]), 'r') as z:\n",
        "    z.extractall(extract_dir)\n",
        "\n",
        "print(\"Conteúdo extraído em:\", extract_dir)\n",
        "\n",
        "# (!!!) Conferir arquivos:\n",
        "for path in sorted(glob.glob(extract_dir + \"/**/*\", recursive=True))[:20]:\n",
        "    print(path)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a559ae0a",
      "metadata": {
        "id": "a559ae0a"
      },
      "source": [
        "## 2) Leitura dos CSVs (separador `;`)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "2974a1af",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 534
        },
        "id": "2974a1af",
        "outputId": "d26aeb15-ab42-4b17-8ca8-673fd0ae3390"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arquivo clientes: dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/clientes_desde_FULL.csv\n",
            "Arquivo MRR: dados_zip_extraidos/Challenge_TOTVS_2025_MassaDados_v1_amostra2/mrr_FULL.csv\n",
            "\n",
            "Prévia clientes (5 linhas):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  CLIENTE CLIENTE_DESDE\n",
              "0  TFDICB    2023-01-27\n",
              "1  TFCU91    2021-01-26\n",
              "2  TFDDYV    2022-07-18\n",
              "3  TEZBRW    2022-10-28\n",
              "4  TEZCXN    2013-05-24"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c47ccb5-ef8f-4186-a569-b3e3d37bcbc5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CLIENTE</th>\n",
              "      <th>CLIENTE_DESDE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TFDICB</td>\n",
              "      <td>2023-01-27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TFCU91</td>\n",
              "      <td>2021-01-26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TFDDYV</td>\n",
              "      <td>2022-07-18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TEZBRW</td>\n",
              "      <td>2022-10-28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TEZCXN</td>\n",
              "      <td>2013-05-24</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c47ccb5-ef8f-4186-a569-b3e3d37bcbc5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7c47ccb5-ef8f-4186-a569-b3e3d37bcbc5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7c47ccb5-ef8f-4186-a569-b3e3d37bcbc5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-34f2634a-d67f-4a44-81be-9850a9519908\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34f2634a-d67f-4a44-81be-9850a9519908')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-34f2634a-d67f-4a44-81be-9850a9519908 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_9ac00e0c-1a58-43c6-b6e1-bcc29e418fa2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('clientes_preview')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9ac00e0c-1a58-43c6-b6e1-bcc29e418fa2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('clientes_preview');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "clientes_preview",
              "summary": "{\n  \"name\": \"clientes_preview\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CLIENTE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"TFCU91\",\n          \"TEZCXN\",\n          \"TFDDYV\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CLIENTE_DESDE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2021-01-26\",\n          \"2013-05-24\",\n          \"2022-07-18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Prévia MRR (5 linhas):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  CLIENTE     MRR_12M\n",
              "0  T03360  485.245250\n",
              "1  T01872  287.070309\n",
              "2  T01899  628.717296\n",
              "3  T01670  207.503636\n",
              "4  T02817  890.027855"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46865a2a-c3f8-4c0e-aa72-4dba2a893345\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CLIENTE</th>\n",
              "      <th>MRR_12M</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>T03360</td>\n",
              "      <td>485.245250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T01872</td>\n",
              "      <td>287.070309</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>T01899</td>\n",
              "      <td>628.717296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>T01670</td>\n",
              "      <td>207.503636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>T02817</td>\n",
              "      <td>890.027855</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46865a2a-c3f8-4c0e-aa72-4dba2a893345')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46865a2a-c3f8-4c0e-aa72-4dba2a893345 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46865a2a-c3f8-4c0e-aa72-4dba2a893345');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d6b6223a-50ba-4f06-9ea6-c0505d06b0dc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6b6223a-50ba-4f06-9ea6-c0505d06b0dc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d6b6223a-50ba-4f06-9ea6-c0505d06b0dc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ddf9dd7a-1b95-408c-8ad5-7fffa88d1f90\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('mrr_preview')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ddf9dd7a-1b95-408c-8ad5-7fffa88d1f90 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('mrr_preview');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mrr_preview",
              "summary": "{\n  \"name\": \"mrr_preview\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CLIENTE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"T01872\",\n          \"T02817\",\n          \"T01899\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MRR_12M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 273.7701301526107,\n        \"min\": 207.503636,\n        \"max\": 890.027855,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          287.070309,\n          890.027855,\n          628.717296\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Formas: (10615, 2) (7309, 2)\n"
          ]
        }
      ],
      "source": [
        "CLIENTES_BASE = \"clientes_desde_FULL.csv\"\n",
        "MRR_BASE = \"mrr_FULL.csv\"\n",
        "\n",
        "clientes_paths = glob.glob(os.path.join(\"dados_zip_extraidos\", \"**\", CLIENTES_BASE), recursive=True)\n",
        "mrr_paths = glob.glob(os.path.join(\"dados_zip_extraidos\", \"**\", MRR_BASE), recursive=True)\n",
        "\n",
        "assert len(clientes_paths) >= 1, f\"Arquivo {CLIENTES_BASE} não encontrado dentro do ZIP.\"\n",
        "assert len(mrr_paths) >= 1, f\"Arquivo {MRR_BASE} não encontrado dentro do ZIP.\"\n",
        "\n",
        "clientes_path = clientes_paths[0]\n",
        "mrr_path = mrr_paths[0]\n",
        "print(\"Arquivo clientes:\", clientes_path)\n",
        "print(\"Arquivo MRR:\", mrr_path)\n",
        "\n",
        "clientes_preview = pd.read_csv(clientes_path, sep=\";\", nrows=5, low_memory=False)\n",
        "mrr_preview = pd.read_csv(mrr_path, sep=\";\", nrows=5, low_memory=False)\n",
        "\n",
        "print(\"\\nPrévia clientes (5 linhas):\")\n",
        "display(clientes_preview)\n",
        "print(\"\\nPrévia MRR (5 linhas):\")\n",
        "display(mrr_preview)\n",
        "\n",
        "clientes = pd.read_csv(clientes_path, sep=\";\", low_memory=False)\n",
        "mrr = pd.read_csv(mrr_path, sep=\";\", low_memory=False)\n",
        "\n",
        "print(\"\\nFormas:\", clientes.shape, mrr.shape)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c02241dd",
      "metadata": {
        "id": "c02241dd"
      },
      "source": [
        "## 3) Pré-processamento simples"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "a2c2a79f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a2c2a79f",
        "outputId": "7e2841c4-af30-4cec-a41c-c2d41b0d3fce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Amostra de features padronizadas (5 linhas):\n",
            "    MRR_12M  tempo_cliente_meses\n",
            "0 -0.120433            -0.880321\n",
            "1  0.525214            -0.596222\n",
            "2 -0.075786            -0.804561\n",
            "3 -0.193642            -0.844809\n",
            "4  1.064818             0.494010\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2501150273.py:21: UserWarning: Parsing dates in %Y-%m-%d format when dayfirst=True was specified. Pass `dayfirst=False` or specify a format to silence this warning.\n",
            "  base[COL_CLIENTE_DESDE] = pd.to_datetime(base[COL_CLIENTE_DESDE], errors=\"coerce\", dayfirst=True)\n"
          ]
        }
      ],
      "source": [
        "# Explicação:\n",
        "# - Fazemos merge por 'CLIENTE'.\n",
        "# - Criamos 'tempo_cliente_meses' a partir de 'CLIENTE_DESDE'.\n",
        "# - Mantemos somente colunas numéricas relevantes: 'MRR_12M' e 'tempo_cliente_meses'.\n",
        "# - Preenchemos nulos com a mediana e padronizamos (média=0, desvio=1).\n",
        "\n",
        "\n",
        "MERGE_KEY = \"CLIENTE\"\n",
        "COL_CLIENTE_DESDE = \"CLIENTE_DESDE\"\n",
        "COL_MRR_12M = \"MRR_12M\"\n",
        "\n",
        "# Aq é feito o merge por cliente:\n",
        "base = clientes.merge(mrr, on=MERGE_KEY, how=\"left\")\n",
        "\n",
        "# Conversoes de data\n",
        "base[COL_CLIENTE_DESDE] = pd.to_datetime(base[COL_CLIENTE_DESDE], errors=\"coerce\", dayfirst=True)\n",
        "ref = pd.Timestamp.today()\n",
        "base[\"tempo_cliente_meses\"] = ((ref - base[COL_CLIENTE_DESDE]).dt.days / 30.44).round(1)\n",
        "\n",
        "# Seleção de features numericas para clusterização\n",
        "features = base[[COL_MRR_12M, \"tempo_cliente_meses\"]].copy()\n",
        "\n",
        "# Conversão para numerico (pois tinha alguns como texto)\n",
        "for c in features.columns:\n",
        "    features[c] = pd.to_numeric(features[c], errors=\"coerce\")\n",
        "\n",
        "# Trata nulos com mediana (decidimos não ignora-los)\n",
        "features = features.fillna(features.median(numeric_only=True))\n",
        "\n",
        "# Padronizaçao\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(features.values)\n",
        "\n",
        "print(\"Amostra de features padronizadas (5 linhas):\")\n",
        "print(pd.DataFrame(X, columns=features.columns).head())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b96f03e4",
      "metadata": {
        "id": "b96f03e4"
      },
      "source": [
        "## 4) Escolha do número de clusters — Método do Cotovelo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "f7d97df1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "f7d97df1",
        "outputId": "bbfa0b66-d0e4-4fa0-bfe7-d03000e81aee"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tabela K x Inércia:\n",
            "K=2 -> Inércia = 13504.23\n",
            "K=3 -> Inércia = 8596.09\n",
            "K=4 -> Inércia = 5921.20\n",
            "K=5 -> Inércia = 4320.03\n",
            "K=6 -> Inércia = 3535.19\n",
            "K=7 -> Inércia = 2958.38\n",
            "K=8 -> Inércia = 2582.71\n",
            "K=9 -> Inércia = 2271.92\n",
            "K=10 -> Inércia = 2027.70\n"
          ]
        }
      ],
      "source": [
        "# Explicação: testamos K de 2 a 10 e medimos a inércia. O \"cotovelo\"\n",
        "# (queda que começa a estabilizar)\n",
        "# sugere um bom K.\n",
        "\n",
        "\n",
        "Ks = list(range(2, 11))\n",
        "inertias = []\n",
        "\n",
        "for k in Ks:\n",
        "    km = KMeans(n_clusters=k, random_state=42, n_init=10)\n",
        "    km.fit(X)\n",
        "    inertias.append(km.inertia_)\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(Ks, inertias, marker='o')\n",
        "plt.xlabel(\"Número de clusters (K)\")\n",
        "plt.ylabel(\"Inércia (soma das distâncias intra-cluster)\")\n",
        "plt.title(\"Método do Cotovelo - KMeans\")\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "print(\"Tabela K x Inércia:\")\n",
        "for k, i in zip(Ks, inertias):\n",
        "    print(f\"K={k} -> Inércia = {i:.2f}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "> Observando o gráfico do método do cotovelo, notamos que as duas maiores reduções de inércia ocorrem de **K=2 >> K=3** e de **K=3 >> K=4**.  \n",
        "> Após isso, a curva começa a estabilizar.  \n",
        "> Por simplicidade e boa separação dos grupos, escolhemos **K = 3** como número de clusters.\n"
      ],
      "metadata": {
        "id": "LkjLnEoYrPGL"
      },
      "id": "LkjLnEoYrPGL"
    },
    {
      "cell_type": "markdown",
      "id": "b0d5c71c",
      "metadata": {
        "id": "b0d5c71c"
      },
      "source": [
        "## 5) Clusterização com KMeans"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "c587dc68",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c587dc68",
        "outputId": "485c7154-6731-4781-8b6b-df6504246f0e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Distribuição de clientes por cluster:\n",
            "cluster\n",
            "0    4048\n",
            "1    6560\n",
            "2       7\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Aqui pode-se ajustar o K manualmente, a partir do gráfico a cima\n",
        "\n",
        "K_escolhido = 3  #@param {\"type\":\"slider\", \"min\":2, \"max\":10, \"step\":1}\n",
        "\n",
        "km_final = KMeans(n_clusters=K_escolhido, random_state=42, n_init=10)\n",
        "labels = km_final.fit_predict(X)\n",
        "\n",
        "base_resultados = base.copy()\n",
        "base_resultados[\"cluster\"] = labels\n",
        "\n",
        "print(\"Distribuição de clientes por cluster:\")\n",
        "print(base_resultados[\"cluster\"].value_counts().sort_index())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d52afec1",
      "metadata": {
        "id": "d52afec1"
      },
      "source": [
        "## 6) Visualização dos clusters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "a68cd978",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "a68cd978",
        "outputId": "193e414f-b35a-4798-e923-732b3e5cee70"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Explicação: visualizamos os pontos por cluster e marcamos os centróides no espaço padronizado\n",
        "# O eixo x é MRR_12M e o y é tempo_cliente_meses (ambos padronizados para o gráfico ficar comparável)\n",
        "\n",
        "\n",
        "X_df = pd.DataFrame(X, columns=[\"MRR_12M\", \"tempo_cliente_meses\"])\n",
        "\n",
        "plt.figure()\n",
        "for cl in sorted(base_resultados[\"cluster\"].unique()):\n",
        "    idx = base_resultados[\"cluster\"] == cl\n",
        "    plt.scatter(X_df.loc[idx, \"MRR_12M\"], X_df.loc[idx, \"tempo_cliente_meses\"], s=12, label=f\"Cluster {cl}\")\n",
        "\n",
        "\n",
        "centroids = km_final.cluster_centers_\n",
        "plt.scatter(centroids[:,0], centroids[:,1], s=150, marker=\"X\", edgecolor=\"black\", label=\"Centróide\")\n",
        "\n",
        "plt.xlabel(\"MRR_12M (padronizado)\")\n",
        "plt.ylabel(\"tempo_cliente_meses (padronizado)\")\n",
        "plt.title(\"Clusters de clientes (KMeans)\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "OBS: Centróide = média de coordenadas dos clientes no cluster"
      ],
      "metadata": {
        "id": "iQkt7O2ZrrNc"
      },
      "id": "iQkt7O2ZrrNc"
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "c4e44680",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c4e44680",
        "outputId": "d76c01dd-7463-44de-d04f-f6d48248a3b1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          MRR_12M  tempo_cliente_meses\n",
            "cluster                               \n",
            "0          841.02               195.43\n",
            "1          473.59                49.80\n",
            "2        31764.05                93.46\n"
          ]
        }
      ],
      "source": [
        "# Explicação: calculamos as médias de MRR_12M e tempo_cliente_meses por cluster:\n",
        "\n",
        "resumo = base_resultados.assign(tempo_cliente_meses=base[\"tempo_cliente_meses\"])[[\"cluster\", \"MRR_12M\", \"tempo_cliente_meses\"]]\n",
        "print(resumo.groupby(\"cluster\").mean(numeric_only=True).round(2))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "65ac88b4",
      "metadata": {
        "id": "65ac88b4"
      },
      "source": [
        "## 7) Exportar resultados (opcional)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "ba41bcb2",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ba41bcb2",
        "outputId": "0c372b07-11fe-4622-d5e6-aeaed28bf393"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arquivo salvo: clientes_clusterizados.csv\n"
          ]
        }
      ],
      "source": [
        "# Gerar CSV com IDCLIENTE + Seu respecitvo cluster:\n",
        "\n",
        "out_path = \"clientes_clusterizados.csv\"\n",
        "base_resultados[[ \"CLIENTE\", \"cluster\"]].to_csv(out_path, index=False, sep=\";\")\n",
        "print(\"Arquivo salvo:\", out_path)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "language_info": {
      "name": "python"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
